#version 330 core

struct Material {
	sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 FragColor;

uniform Material material;
uniform DirLight light; 

in vec3 Normal;
in vec3 FragPos; 
in vec2 TexCoord;

void main() {
	vec3 ligthDir = normalize(-light.direction);

	//ambient
	vec3 ambient = light.ambient * texture(material.diffuse, TexCoord).rgb;

	// difuse
	vec3 normal = normalize(Normal);
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = diffStrength * light.diffuse * vec3(texture(material.diffuse, TexCoord));

	//specular
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, TexCoord).rgb;

	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);
}