#version 330 core
struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 FragColor;

uniform Material material;
uniform Light light; 

in vec3 Normal;
in vec3 FragPos; 

void main() {
	//ambient
	vec3 ambient = material.ambient * light.ambient;

	// difuse
	vec3 normal = normalize(Normal);
	vec3 ligthDir = normalize(light.position - FragPos);
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = (diffStrength * material.diffuse) * light.diffuse;

	//specular
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec) * light.specular;

	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);
}