#version 330 core
out vec4 FragColor;

uniform vec3 objectColor;
uniform vec3 lightColor;

in vec3 Normal;
in vec3 FragPos; 
in vec3 LightPos;

void main() {
	float ambienStrength = 0.1;
	vec3 ambient = ambienStrength * lightColor;

	vec3 normal = normalize(Normal);
	vec3 ligthDir = normalize(LightPos - FragPos);
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = diffStrength * lightColor;

	float specularStrength = 1.0;
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);
}