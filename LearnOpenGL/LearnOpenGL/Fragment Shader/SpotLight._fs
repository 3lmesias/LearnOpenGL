#version 330 core

struct Material {
	sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 

struct SpotLight {
    vec3 position;
	vec3 direction;
    float cutOff;
	float outerCutOff;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

out vec4 FragColor;

uniform Material material;
uniform SpotLight light; 

in vec3 Normal;
in vec3 FragPos; 
in vec2 TexCoord;

void main() {
	vec3 ligthDir = normalize(light.position - FragPos);

	float theta = dot(ligthDir, normalize(-light.direction));
	float epsilon   = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	if(true)//theta > light.cutOff)
	{
		float distance = length(light.position - FragPos);
		float attenuation = 1.0/(light.constant + light.linear*distance + light.quadratic*(distance*distance));

		//ambient
		vec3 ambient = light.ambient * texture(material.diffuse, TexCoord).rgb;

		// difuse
		vec3 normal = normalize(Normal);
		float diffStrength = max(dot(normal, ligthDir), 0.0);
		vec3 diffuse = diffStrength * light.diffuse * vec3(texture(material.diffuse, TexCoord));

		//specular
		vec3 viewDir = normalize(-FragPos);
		vec3 reflectDir = reflect(-ligthDir, normal);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		vec3 specular = light.specular * spec * texture(material.specular, TexCoord).rgb;

		//ambient = ambient*attenuation;
		diffuse = diffuse*attenuation*intensity;
		specular = specular*attenuation*intensity;
		vec3 result = ambient + diffuse + specular;
		FragColor = vec4(result, 1.0);
	}else{
		//ambient
		float distance = length(light.position - FragPos);
		float attenuation = 1.0/(light.constant + light.linear*distance + light.quadratic*(distance*distance));


		vec3 ambient = light.ambient * texture(material.diffuse, TexCoord).rgb;
		//ambient = ambient*attenuation;
		FragColor = vec4(ambient, 1.0);
	}
}