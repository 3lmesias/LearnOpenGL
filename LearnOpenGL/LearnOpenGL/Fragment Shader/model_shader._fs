#version 330 core

struct Material {
	sampler2D texture_diffuse1;
	sampler2D texture_diffuse2;
	sampler2D texture_diffuse3;
    sampler2D texture_specular1;
	sampler2D texture_specular2;
	sampler2D texture_specular3;
    float shininess;
}; 

struct PointLight {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight {
    vec3 position;
	vec3 direction;
    float cutOff;
	float outerCutOff;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform DirLight dirLight;

#define POINT_LIGHTS 4
uniform PointLight pointLights[POINT_LIGHTS];

uniform SpotLight spotLight;

uniform Material material;

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos; 
in vec2 TexCoord;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);  
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main() {
	vec3 viewDir = normalize(-FragPos);
	vec3 normal = normalize(Normal);
	vec3 result = vec3(0,0,0);
	result += CalcDirLight(dirLight, normal, viewDir);
	for(int i = 0; i < POINT_LIGHTS; i++){
		result += CalcPointLight(pointLights[i], normal, FragPos, viewDir);  
	}
	result += CalcSpotLight(spotLight, normal, FragPos, viewDir);
	FragColor = vec4(result, 1.0);
}


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir){
	vec3 ligthDir = normalize(-light.direction);

	//ambient
	vec3 ambient = light.ambient * texture(material.texture_diffuse1, TexCoord).rgb;

	// difuse
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = diffStrength * light.diffuse * vec3(texture(material.texture_diffuse1, TexCoord));

	//specular
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.texture_specular1, TexCoord).rgb;

	return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 ligthDir = normalize(light.position - fragPos);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0/(light.constant + light.linear*distance + light.quadratic*(distance*distance));

	//ambient
	vec3 ambient = light.ambient * texture(material.texture_diffuse1, TexCoord).rgb;

	// difuse
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = diffStrength * light.diffuse * vec3(texture(material.texture_diffuse1, TexCoord));

	//specular
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.texture_specular1, TexCoord).rgb;

	ambient = ambient*attenuation;
	diffuse = diffuse*attenuation;
	specular = specular*attenuation;

	vec3 result = ambient + diffuse + specular;
	return result;
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 ligthDir = normalize(light.position - fragPos);

	float theta = dot(ligthDir, normalize(-light.direction));
	float epsilon   = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0/(light.constant + light.linear*distance + light.quadratic*(distance*distance));

	//ambient
	vec3 ambient = light.ambient * texture(material.texture_diffuse1, TexCoord).rgb;

	// difuse
	float diffStrength = max(dot(normal, ligthDir), 0.0);
	vec3 diffuse = diffStrength * light.diffuse * vec3(texture(material.texture_diffuse1, TexCoord));

	//specular
	vec3 reflectDir = reflect(-ligthDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.texture_specular1, TexCoord).rgb;

	//ambient = ambient*attenuation;
	diffuse = diffuse*attenuation*intensity;
	specular = specular*attenuation*intensity;
	vec3 result =  diffuse + specular; //ambient + diffuse + specular;

	return result;
}